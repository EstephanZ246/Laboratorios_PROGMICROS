
;UNIVERSIDAD DEL VALLE DE GUATEMALA
;PROGRAMACION DE MICROCONTROLADORES    
;FRANCISCO ESTEPHAN PORTALES OKRASSA
;CARNE: 19826
;LABORATORIO 6
;ÚLTIMA MODIFICACIÓN 25/03/2021
    
PROCESSOR 16F887
#include <xc.inc>

; CONFIG1
CONFIG  FOSC = INTRC_NOCLKOUT ; Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
CONFIG  WDTE = OFF            ; Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
CONFIG  PWRTE = ON            ; Power-up Timer Enable bit (PWRT enabled)
CONFIG  MCLRE = OFF           ; RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
CONFIG  CP = OFF              ; Code Protection bit (Program memory code protection is disabled)
CONFIG  CPD = OFF             ; Data Code Protection bit (Data memory code protection is disabled)
CONFIG  BOREN = OFF           ; Brown Out Reset Selection bits (BOR disabled)
CONFIG  IESO = OFF            ; Internal External Switchover bit (Internal/External Switchover mode is disabled)
CONFIG  FCMEN = OFF           ; Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
CONFIG  LVP = ON              ; Low Voltage Programming Enable bit (RB3/PGM pin has PGM function, low voltage programming enabled)

; CONFIG2
CONFIG  BOR4V = BOR40V        ; Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
CONFIG  WRT = OFF             ; Flash Program Memory Self Write Enable bits (Write protection off)
  
;MACROS
    REINICIAR_TMR0 MACRO // MACRO PARA RESETAR TIMER0
    BANKSEL TMR0// SELECCIONAMOS BANCO QUE VAMOS A USAR
    MOVLW 0X1F// 131 Colocamos valor obtenido con formula 2ms
    MOVWF TMR0 // movemos el valor a timer0
    BCF T0IF; Limpiamos bandera de Timer0 
    BANKSEL PORTA // REGRESAMOS A BANCO 0
    ENDM
    
REINICIAR_TMR1 MACRO
    BANKSEL TMR1L
    /////// VALOR ES 49911 EN HEX ES: C2F7 PARA TENER 1000ms
    MOVLW 0XC2//VALOR BYTE SUPERIOR
    MOVWF TMR1H// CARGAR A BYTE SUPERIOR
    MOVLW 0XF7 // VALOR PARA BYTE INFERIOR TIMER 1
    MOVWF TMR1L //CARGAR A BYTE INFERIOR
    BCF PIR1,0; TMR1IF Limpiamos bandera de Timer1
    ENDM
    
REINICIAR_TMR2 MACRO
    BANKSEL PIR1 // VAMOS A BANCO 0 
    BCF PIR1,1// LIMPIAMOS BANDERA DE 
    ENDM
 
RUTINA_BCD MACRO // CONVERSOR DE BINARIO A DECIMAL
	CLRF	DECENA // LIMPIARMOS VARIABLE DECENA
	CLRF	CENTENA// LIMPIARMOS VARIABLE CENTENA (NO VA A SER NECESARIA DE IMPRIMIR)
	CLRF	UNIDAD
	MOVF	CONTADOR,W // PASAMOS VALOR QUE QUEREMOS CONVERTIR A W
	MOVWF	UNIDAD // MOVEMOS VALOR A VARIABLE UNIDAD
	
BCD_0:
	MOVLW	0X0A // MOVEMOS VALOR DE 10 A W
	SUBWF	UNIDAD,W // RESTAMOS VALOR 10 A UNIDAD Y LO GUARDAMOS EN W
	BTFSS	STATUS,0//C // VERIFICAMOS CARRY DE STATUS
	GOTO	BCD_Fin // SI EL VALOR FUE 0 SALTA AL FINAL
BCD_1:
	MOVWF	UNIDAD // REGRESAMOS EL VALOR A UNIDAD
	INCF	DECENA,F // INCREMENTAMOS EN 1 EL VALOR DE DECENA
	MOVLW	0X0A //PONEMOS 10 DE NUEVO A W
	SUBWF	DECENA,W // RESTAMOS VALOR
	BTFSS	STATUS,0//C VERIFICAMOS CARRY DE ESTATUS 
	GOTO	BCD_0 // SI CARRY FUE 0, NEGATIVO 
BCD_2:
	CLRF	DECENA // LIMPIARMOS DECENA
	INCF	CENTENA,F // INCREMENTAMOS CENTENA
	GOTO	BCD_0 // VAMOS AL INICIO
BCD_Fin:  
    MOVF UNIDAD,W
    MOVWF UNIDAD_TEMP
    MOVF DECENA,W
    MOVWF DECENA_TEMP
    ENDM
  

PSECT udata_bank0; common memory /// VARIABLES
    CONTADOR: DS 1
    UNIDAD_TEMP: DS 1
    DECENA_TEMP: DS 1
    ENABLE_DISPLAYS: DS 1
    DECENA: DS 1
    CENTENA: DS 1
    UNIDAD: DS 1
    SUMA_TEMP: DS 1
    
PSECT udata_shr 
    W_TEMP:	    DS 1 // GUARDAR TEMPORALMENTE EL REGISTRO EN INTERRUPCION
    STATUS_TEMP:    DS 1 // GUARDAR TEMPORALMENTE EL REGISTRO EN INTERRUPCION
 ;_______________Vector Reset_________________
 
PSECT resVect, class=CODE, abs, delta=2
    ORG 00h         ;posición 0000h para el Reset
	resetVec:; configuramos el vector de reset
	PAGESEL MAIN
	GOTO MAIN
     
PSECT intVect, class=CODE, abs, delta=2
    ORG 04h // AQUI ALMACENAMOS LA INTERRUPCION, INDIRECT DATA MEMORY ADDRESS POINTER
    
ALMACENAR_REGISTROS: // PUSH
    MOVWF W_TEMP
    SWAPF STATUS,W // ALMACENAR  REGISTROS EN VARIABLES TEMPORALES
    MOVWF STATUS_TEMP
    
EJECUTAR_INTERRUPCION://POP
///////////////////////////////////////////////////////////////////////////
//			    TIMER 0
//////////////////////////////////////////////////////////////////////////
    BTFSS INTCON,2// T0IF BANDERA TIMER0
    GOTO INTERRUPCION_TIMER1 // GOTO INTPORTD // SI NO ESTÁ ACTIVO LA BANDERA VAMOS A INTERRUPCION DE PORTB
    MOVLW 0X03
    XORWF PORTE // APLICAMOS XOR PARA QUE PODAMOS HACER EL MULTIPLEXADO
    CLRF PORTC
    BTFSS PORTE,0
    GOTO FIN
    BTFSS PORTE,1
    GOTO FIN
    MOVLW 0X01
    MOVWF PORTE   
FIN:
    REINICIAR_TMR0 // REINICIAMOS CONTADOR DEL TIMER0

///////////////////////////////////////////////////////////////////////////
//			    TIMER 1
//////////////////////////////////////////////////////////////////////////  
INTERRUPCION_TIMER1:
    BTFSS PIR1,0// VERIFICAMOS BANDERA
    GOTO INTERRUPCION_TIMER2
    MOVLW 0X01 
    ADDWF CONTADOR // AUMENTAMOS VALOR A CONTADOR 

    REINICIAR_TMR1

///////////////////////////////////////////////////////////////////////////
//			    TIMER 2
///////////////////////////////////////////////////////////////////////////  
INTERRUPCION_TIMER2:
    BTFSS PIR1,1// VERIFICAMOS BANDERA TIMER 2
    GOTO RESTAURAR_REGISTROS 
    MOVLW 0X01
    XORWF PORTA // ENCENDEMOS LED
    XORWF ENABLE_DISPLAYS // ENCENDER Y APAGAR LOS DISPLAY
    REINICIAR_TMR2

RESTAURAR_REGISTROS://RETFIE
    SWAPF STATUS_TEMP,W // RECUPERAMOS REGISTROS SIN MODIFICAR BANDERAS
    MOVWF STATUS// RECUPERAMOS REGISTROS SIN MODIFICAR BANDERAS
    SWAPF W_TEMP,1// RECUPERAMOS REGISTROS SIN MODIFICAR BANDERAS
    SWAPF W_TEMP,W// RECUPERAMOS REGISTROS SIN MODIFICAR BANDERAS
    RETFIE// SALIMOS DE LA INTERRUPCION
  
PSECT code, delta=2, abs
ORG 100h //INICIAMOS CODIGO CON LAS TABLAS
 
TABLAS:
    CLRF PCLATH
    BSF PCLATH,0 // ESCOGER VALOR DE LAS TABLAS SEGUN CONTADORES
    ADDWF PCL ; PC+PCLATH + PCL + W
    ;     abcdefg      del display 7 segmentos
    retlw 0110000B;1
    retlw 1101101B;2
    retlw 1111001B;3
    retlw 0110011B;4
    retlw 1011011B;5
    retlw 1011111B;6
    retlw 1110001B;7
    retlw 1111111B;8
    retlw 1110011B;9

CONFIGURAR_IO:
    BANKSEL ANSEL // SALIDA DIGITALES
    CLRF ANSEL// SALIDA DIGITALES
    CLRF ANSELH// SALIDA DIGITALES
    
    BANKSEL TRISA
    CLRF TRISA; SALIDA PARA CONFIGURACION TIEMPO DISPLAYS
    CLRF TRISC
    CLRF TRISE

    BANKSEL PORTA
    CLRF PORTA // LIMPIAMOS PUERTOS
    CLRF PORTC
    CLRF PORTD
    CLRF PORTE
    RETURN
    
CONFIGURAR_INTERRUPCIONES:
    BANKSEL INTCON
    BSF INTCON,7//GIE
    BSF INTCON,5//T0IE HABILITA INTERRUPCION TMR0
    BCF INTCON,2//T0IF ESTA ES LA BANDERA DE TMR0
    BSF INTCON,6 // HABILITAMOS PERIPHERIAL INTERRUPT PARA TIMER 1 Y TIMER 2
    BANKSEL PIE1 // HABILITAMOS INTERRUPCIÓN
    BSF PIE1,0 // TIMER1 OVERFLOW INTERRUPT
    BSF PIE1,1// TIMER2 OVERFLOW INTERRUPT
    BANKSEL PORTA
    RETURN
    
CONFIGURAR_RELOJ:
    BANKSEL OSCCON// Seleccionamos el banco OSCCON 
    BCF OSCCON,6// IRCF2
    BSF OSCCON,5// IRCF1 Configuramos la velocidad a 500kHz
    BSF OSCCON,4// IRCF0
    BCF SCS//OSCCON,0 // SCS // Colocamos el oscilador interno como reloj del sistema
    BANKSEL PORTA // Vamos a banco 0
    RETURN  
    

CONFIGURAR_TMR0:
    BANKSEL TRISA // Vamos a banco 1
    BCF T0CS // Configuramos (Fosc/4)
    BCF PSA// PSA asignamos el prescaler al Timer0
    BCF PS2//
    BCF PS1// configuramos el prescaler a 1:2
    BCF PS0//
    BANKSEL PORTA// Vamos al banco 0
    REINICIAR_TMR0 // Reiniciamos el timer0 con la subrutina
    RETURN 
    
CONFIGURAR_TMR1:
    //PRESCALER
    BANKSEL T1CON
    BSF T1CON,5//T1CKPS1 // PREESCALER DE 1:8
    BSF T1CON,4//T1CKPS0 
    BCF T1CON,1//TMR1CS
    BSF T1CON,0//TMR1ON
    BANKSEL PORTA
    REINICIAR_TMR1
    RETURN
    
CONFIGURAR_TMMR2:
    BANKSEL T2CON
    BSF T2CON,1///PRESCALER
    BSF T2CON,0///PRESCALER  // 1:16
    BSF T2CON,6///POSTCALER
    BSF T2CON,5///POSTCALER // 1:16
    BSF T2CON,4///POSTCALER
    BSF T2CON,3///POSTCALER
    BSF T2CON,2 // TIMER 2 ON
    MOVLW 150// 122 PARA 250MS
    MOVWF PR2
    REINICIAR_TMR2
    RETURN
    

MAIN:
    CALL CONFIGURAR_IO
    CALL CONFIGURAR_INTERRUPCIONES
    CALL CONFIGURAR_RELOJ
    CALL CONFIGURAR_TMR0
    CALL CONFIGURAR_TMR1
    CALL CONFIGURAR_TMMR2
    MOVLW 0X01
    MOVWF PORTE

    
LOOP:
    RUTINA_BCD // HACEMOS LA CONVERSIÓN DE BINARIO A DECIMAL
    
    //BTFSS ENABLE_DISPLAYS,0 // SI TENEMOS EL ENABLE DE DISPLAYS LOS ENCENDEMOS O APAGAMOS
    //GOTO APAGAR_DISPLAYS // SI EL ENABLE ESTA APAGADO VAMOS A LA PARTE DE APAGAR DISPLAYS
    BTFSC PORTE,0 // VARIFICAMOS VALOR DE MUXEO PARA ENCENDER Y CARGAR VALOR CORRESPONDIENTE A CADA DISPLAY
    CALL DISPLAY1
    BTFSC PORTE,1
    CALL DISPLAY2
    GOTO LOOP 
    
APAGAR_DISPLAYS: // PARA APAGAR DISPLAYS SEGÚN ENABLE
    CLRF PORTC
    GOTO LOOP
   
DISPLAY1:
    MOVF DECENA_TEMP,W // MOVEMOS VALOR OBTENIDO DE DECENA PARA IMPRIMIRLO 
    CALL TABLAS  // OBTENEMOS VALOR CORRESPONDIENTE PARA DISPLAY
    MOVWF PORTC  // IMPRIMIMOS EN EL PUERTO
    RETURN
    
DISPLAY2:  
    MOVF UNIDAD_TEMP,W// MOVEMOS VALOR OBTENIDO DE UNIDAD PARA IMPRIMIRLO 
    CALL TABLAS   // OBTENEMOS VALOR CORRESPONDIENTE PARA DISPLAY
    MOVWF PORTC  // IMPRIMIMOS EN EL PUERTO
    RETURN
 

END
