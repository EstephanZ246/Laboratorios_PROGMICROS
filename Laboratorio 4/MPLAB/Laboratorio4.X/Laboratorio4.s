;UNIVERSIDAD DEL VALLE DE GUATEMALA
;PROGRAMACION DE MICROCONTROLADORES    
;FRANCISCO ESTEPHAN PORTALES OKRASSA
;CARNE: 19826
;lABORATORIO 4
;ÚLTIMA MODIFICACIÓN 27/02/2021
    
    PROCESSOR 16F887
    #include <xc.inc>

    ;CONFIG1
    CONFIG  FOSC = INTRC_NOCLKOUT ; Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
    CONFIG  WDTE = OFF            ; Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
    CONFIG  PWRTE = ON            ; Power-up Timer Enable bit (PWRT enabled)
    CONFIG  MCLRE = OFF           ; RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
    CONFIG  CP = OFF              ; Code Protection bit (Program memory code protection is disabled)
    CONFIG  CPD = OFF             ; Data Code Protection bit (Data memory code protection is disabled)
    CONFIG  BOREN = ON            ; Brown Out Reset Selection bits (BOR enabled)
    CONFIG  IESO = OFF             ; Internal External Switchover bit (Internal/External Switchover mode is enabled)
    CONFIG  FCMEN = OFF            ; Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is enabled)
    CONFIG  LVP = ON              ; Low Voltage Programming Enable bit (RB3/PGM pin has PGM function, low voltage programming enabled)

    ;CONFIG2
    CONFIG  BOR4V = BOR40V        ; Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
    CONFIG  WRT = OFF             ; Flash Program Memory Self Write Enable bits (Write protection off)
  
    ;MACROS
    REINICIAR_TMR0 MACRO
    MOVLW 100 //99.75 Colocamos valor obtenido con formula para tener 500ms => 20ms=4*(1/4000000)*(256-TMR0)*(128)
    MOVWF TMR0 // movemos el valor a timer0
    BCF T0IF; Limpiamos bandera de Timer0 
    ENDM
  
    PSECT udata_bank0; common memory
    ContadorDisplay1: DS 1 //1 BYTE PARA EL TMR0, REUNIR LOS 1000MS
    ContadorDisplay2: DS 1//1 BYTE PARA AUMENTAR EL SEGUNDO DISPLAY
    
    PSECT udata_shr 
    W_TEMP:	    DS 1 // GUARDAR TEMPORALMENTE EL REGISTRO EN INTERRUPCION
    STATUS_TEMP:    DS 1 // GUARDAR TEMPORALMENTE EL REGISTRO EN INTERRUPCION
 
    PSECT resVect, class=CODE, abs, delta=2

;_______________Vector Reset_________________
    ORG 00h         ;posición 0000h para el Reset
    resetVec:; configuramos el vector de reset
    PAGESEL MAIN
    GOTO MAIN
     
    PSECT intVect, class=CODE, abs, delta=2
    ORG 04h // AQUI ALMACENAMOS LA INTERRUPCION, INDIRECT DATA MEMORY ADDRESS POINTER
    
    ALMACENAR_REGISTROS: // PUSH
    MOVWF W_TEMP
    SWAPF STATUS,W // ALMACENAR  REGISTROS EN VARIABLES TEMPORALES
    MOVWF STATUS_TEMP
    
    EJECUTAR_INTERRUPCION://POP
 
    BTFSS INTCON,2// T0IF BANDERA TIMER0
    GOTO PORTBI // SI NO ESTÁ ACTIVO LA BANDERA VAMOS A INTERRUPCION DE PORTB
    INCF ContadorDisplay1 // INCREMENTAMOS VARIABLE PARA 1000MS
    BCF INTCON,2// LIMPIAMOS BANDERA TIMR0
    REINICIAR_TMR0 // REINICIAMOS CONTADOR DEL TIMER0
   
    PORTBI: 
    BTFSS INTCON,0//VERIFICAMOS RBIF BANDERA DEL PUERTO B  
    GOTO  RESTAURAR_REGISTROS // SI NO EST{A ACTIVO VAMOS A RECUPERAR REGISTROS
    BTFSS PORTB,0// SI ESTA EL BOTON OPRIMIDO INCREMENTAMOS PORTA
    INCF PORTA// INCREMENTAR PORTA
    BTFSS PORTB,1// SI ESTA EL BOTON OPRIMIDO DE DECREMENTO DECREMENTA 
    DECF PORTA// DECREMENTA VALOR PORTA
    BCF INTCON,0//LIMPIARMOS BANDERA DEL PUERTOB

    RESTAURAR_REGISTROS://RETFIE
    SWAPF STATUS_TEMP,W // RECUPERAMOS REGISTROS SIN MODIFICAR BANDERAS
    MOVWF STATUS// RECUPERAMOS REGISTROS SIN MODIFICAR BANDERAS
    SWAPF W_TEMP,1// RECUPERAMOS REGISTROS SIN MODIFICAR BANDERAS
    SWAPF W_TEMP,W// RECUPERAMOS REGISTROS SIN MODIFICAR BANDERAS
    RETFIE// SALIMOS DE LA INTERRUPCION

    PSECT code, delta=2, abs
    ORG 100h //INICIAMOS CODIGO CON LAS TABLAS
 
    Tablas:
    CLRF PCLATH
    BSF PCLATH,0 // ESCOGER VALOR DE LAS TABLAS SEGUN CONTADORES
    ADDWF PCL ; PC+PCLATH + PCL + W
    ;     abcdefg      del display 7 segmentos
    retlw 1111110B;0
    retlw 0110000B;1
    retlw 1101101B;2
    retlw 1111001B;3
    retlw 0110011B;4
    retlw 1011011B;5
    retlw 1011111B;6
    retlw 1110001B;7
    retlw 1111111B;8
    retlw 1110011B;9
    retlw 1110111B;A
    retlw 0011111B;b
    retlw 0001101B;c
    retlw 0111101B;d
    retlw 1001111B;E
    retlw 1000111B;F    
    
    CONFIGURAR_IO:
    BANKSEL TRISB //ESCOGEMOS BANCO 1
    BSF TRISB,0//CONFIGUTAMOS ENTRADA
    BSF TRISB,1//CONFIGUTAMOS ENTRADA
    CLRF TRISC//CONFIGURAMOS SALIDA
    CLRF TRISA//CONFIGURAMOS SALIDA
    CLRF TRISD//CONFIGURAMOS SALIDA

    BANKSEL ANSEL // SALIDA DIGITALES
    CLRF ANSEL// SALIDA DIGITALES
    CLRF ANSELH// SALIDA DIGITALES
    
    BANKSEL PORTA// BANCO 0
    CLRF PORTB// LIMPIAMOS PUERTOS
    CLRF PORTC// LIMPIAMOS PUERTOS
    CLRF PORTA// LIMPIAMOS PUERTOS
    CLRF PORTD// LIMPIAMOS PUERTOS
    RETURN// SALIMOS SUBRUTINA
    
    CONFIGURAR_PULLUP:
    BANKSEL OPTION_REG //ESCOGEMOS BANCO 3 O 1
    BCF OPTION_REG,7 //PORTB PULL-UP ENABLE BIT
    
    BANKSEL IOCB
    BSF IOCB,0; INTERRUPT-ON-CHANGE PORTB CONTROL BIT EN PORTB,0
    BSF IOCB,1; INTERRUPT-ON-CHANGE PORTB CONTROL BIT EN PORTB,1
    BANKSEL PORTA//BANCO 0
    MOVF PORTB,W// AL LEER TERMINA CONDICION DE MISMATCH
        
    BSF WPUB,0; CONFIGURAR PULL-UP PORTB,0
    BSF WPUB,1; CONFIGURAR PULL-UP PORTB,1
    BANKSEL PORTA // BANCO 0
    RETURN
    
    CONFIGURAR_INTERRUPCIONES:
    BSF INTCON,7//GIE
    BCF INTCON,0//RBIF ESTA ES LA BANDERA, LA LIMPIAMOS 
    BSF INTCON,3//RBIE HABILITA INTERRUPCION PORTB
    BSF INTCON,5//T0IE HABILITA INTERRUPCION TMR0
    BCF INTCON,0//RBIF ESTA ES LA BANDERA DE PORTB, LA LIMPIAMOS
    BCF INTCON,2//T0IF ESTA ES LA BANDERA DE TMR0
    RETURN
    
    configurar_reloj:
    BANKSEL OSCCON// Seleccionamos el banco OSCCON 
    BSF OSCCON,6// IRCF2
    BSF OSCCON,5// IRCF1 Configuramos la velocidad a 4MHz
    BCF OSCCON,4// IRCF0
    BSF SCS//OSCCON,0 // SCS // Colocamos el oscilador interno como reloj del sistema
    BANKSEL PORTA // Vamos a banco 0
    RETURN
; ___________________________ Configuramos el prescaler_______________________
    configurar_tmr0:
    BANKSEL TRISA // Vamos a banco 1
    BCF T0CS // Configuramos (Fosc/4)
    BCF PSA// PSA asignamos el prescaler al Timer0
    BSF PS2//
    BSF PS1// configuramos el prescaler a 1:128
    BCF PS0//
    BANKSEL PORTA// Vamos al banco 0
    REINICIAR_TMR0 // Reiniciamos el timer0 con la subrutina
    RETURN

    MAIN:
    CALL CONFIGURAR_IO // LAMAMOS SUBRUTINA DE CONFIGURACION
    CALL CONFIGURAR_PULLUP// LAMAMOS SUBRUTINA DE CONFIGURACION
    CALL configurar_reloj// LAMAMOS SUBRUTINA DE CONFIGURACION
    CALL configurar_tmr0// LAMAMOS SUBRUTINA DE CONFIGURACION
    CALL CONFIGURAR_INTERRUPCIONES// LAMAMOS SUBRUTINA DE CONFIGURACION
    
    LOOP: // CICLO INFINITO
    CALL CONTADORES_MANUALES // CONTROLADOR DE CONTADOR BINARIO
    CALL CONTADOR_TMR0// CONTROLADOR DE CONTADOR CON AUTOMATICO
    GOTO LOOP // CICLO INFINITO
  
    CONTADORES_MANUALES: // CONTROLADOR DE CONTADOR BINARIO Y PRIMER DISPLAY
    MOVLW 00001111B// AND PARA CONTROLAR QUE TENGA SOLO 4 BITS
    ANDWF PORTA//HACER AND
    MOVF PORTA,W// MOVEMOS AL REGISTRO DE TRABAJO PARA LLEVARLO A LAS TABLAS
    CALL Tablas// BUSCAMOS EN LAS TABLAS
    MOVWF PORTC// MOVEMOS AL PUERTOC QUE CORRESPONDE A PRIMER DISPLAY
    RETURN // SALIMOS SUBRUTINA
    
    CONTADOR_TMR0: // CONTROLAR TIMER LOS 1000MS
    MOVLW 50 /// 1000MS / 20MS = 50
    SUBWF ContadorDisplay1,W // HACEMOS RESTA PARA SABER SI FUE 0 Y YA ESTAN LOS 1000MS
    BTFSC STATUS,2//ZERO COMPROBAMOS SI FUE 0 Y SI SI AUMENTAMOS VALOR 
    CALL AUMENTAR_DISPLAY_TMR0 // SUBRUTINA PAR AUMENTAR VALOR
    RETURN//SALIR SUBRUTINA
    
    AUMENTAR_DISPLAY_TMR0: // SUBRUTINA PARA AUMENTAR SEGUNDO DISPLAY
    CLRF ContadorDisplay1 // LIMPIAMOS CONTADOR
    BCF STATUS,2/// LIMPIAR Z
    INCF ContadorDisplay2 // INCREMENTAR CONTADOR DE DISPLAY2
    MOVLW 00001111B// APLICAMOS AND
    ANDWF ContadorDisplay2// APLICAMOS AND
    MOVF ContadorDisplay2,W// MOVEMOS AL RESGISTRO DE TRABAJO PARA LAS TABLAS
    CALL Tablas// BISCAR EN TABLAS
    MOVWF PORTD// PONERLO EN EL DISPLAY
    RETURN//SALIR DE SUBRUTINA

 END// TERMINA CODIGO


